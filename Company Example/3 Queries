--Simple queries
--Find all employees ordered by salary
SELECT *
FROM employee
ORDER BY salary DESC;

--Find all employees ordered by sex then name
SELECT *
FROM employee
ORDER BY sex, first_name, last_name;

--Find first and last names of all employees
SELECT first_name, last_name
FROM employee;

--Find forename and surname names of all employees
SELECT first_name AS forename, last_name AS surname
FROM employee;

--Find how many branches exist
SELECT DISTINCT branch_id
FROM employee;



--Functions
--Find number of employees
SELECT COUNT(emp_id) AS Employee_Count
FROM employee;

--Find number of F employees born after 1970
SELECT COUNT(emp_id) AS F_BornAfter_1970
FROM employee
WHERE sex = 'F' AND birth_day > 1970-01-01;

--Find the average of all employee's salaries
SELECT AVG(salary) AS Average_Salary
FROM employee; 

--Find the average of all employee's salaries
SELECT SUM(salary) AS Salary_Sum
FROM employee; 

--Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

--Find the total sales of each salesman
SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id;



--Wildcards: % = any # characters, _ = one character
--Find any clients who are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC';

--Find any branch suppliers who are in the label business
SELECT *
FROM branch_supplier
WHERE supplier_name LIKE '%Label%';

--Find all employees born in October
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%';



--Union
--Find a list of employee and branch names
SELECT first_name AS First_Names_And_Branch_Names FROM employee
UNION
SELECT branch_name FROM branch;

--Find a list of all money spent or earned by the company
SELECT salary FROM employee
UNION
SELECT total_sales FROM works_with;



--Joins
--Find all branches and the names of their managers
SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
JOIN branch --JOIN is automatically an INNER JOIN
ON employee.emp_id = branch.mgr_id;

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
LEFT JOIN branch 
ON employee.emp_id = branch.mgr_id;

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id = branch.mgr_id;



--Nested
--Find names of all employees who have sold over 30,000 to a single client
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN(
    SELECT works_with.emp_id
    FROM works_with
    WHERE works_with.total_sales > 30000
);

--Find all clients who are handled by the branch that Michael Scott manages, assume you know Michael's ID
SELECT client.client_name
FROM client
WHERE client.branch_id =(
    SELECT branch.branch_id
    FROM branch
    WHERE branch.mgr_id = 102
    LIMIT 1
);



--On Delete
--On Delete Set Null (when primary key is deleted, associated foreign key row will be set to NULL)
SELECT * FROM branch;
SELECT * FROM employee;

DELETE FROM employee
WHERE emp_id = 102;

--On Delete Cascade (when primary key is deleted, associated forgeign key row will be deleted)
SELECT * FROM branch_supplier;

DELETE FROM branch
WHERE branch_id = 2;



--Triggers (witten in command line)
CREATE TABLE trigger_test(
    message VARCHAR(100)
);

DESCRIBE trigger_test;

/* Use this in command line
DELIMITER $$ (paste just this first)
CREATE 
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$ (then all this second)
DELIMETER; (then this last)
*/

INSERT INTO employee
VALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 70000, 106, 3);

SELECT * FROM trigger_test;
